// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //Operating by zx

    //making a 16 bit output of the zx control bit i.e. output=x if sel = 0 and output = 0000000000000000 if sel =  1;
    Mux16(a=x, b=false, sel=zx, out=xOPERATEDBYzx);


    //Operating by nx

    //Notting the previous output and then storing it in a new variable.
    Not16(in=xOPERATEDBYzx, out=nxOutTemp);
    //selecting the notted output or non notted output based on the control flag nx.
    Mux16(a=xOPERATEDBYzx, b=nxOutTemp, sel=nx, out=xOPERATEDBYzxOPERATEDBYnx);


    //Operating by zy

    //Performing similar process as zx for zy;
    Mux16(a=y, b=false, sel=zy, out=yOPERATEDBYzy);


    //Operating by ny

    //Performing similar process as nx for ny;
    Not16(in=yOPERATEDBYzy, out=nyOutTemp);
    //selecting the notted output or non notted output based on the control flag nx.
    Mux16(a=yOPERATEDBYzy, b=nyOutTemp, sel=ny, out=yOPERATEDBYzyOPERATEDBYny);


    //Operating by f

    //Performing and of previously processed x and y and storing it in a new variable.
    And16(a=xOPERATEDBYzxOPERATEDBYnx, b=yOPERATEDBYzyOPERATEDBYny, out=outputFromOperationByAnd);
    //Performing addition of previously processed x and y and storing it in a new variable.
    Add16(a=xOPERATEDBYzxOPERATEDBYnx, b=yOPERATEDBYzyOPERATEDBYny, out=outputFromOperationByAdder);
    //Selecting addition or anding based on the control bit f;
    Mux16(a=outputFromOperationByAnd, b=outputFromOperationByAdder, sel=f, out=outputFromOperationByf);

    //operating by no
    Not16(in=outputFromOperationByf, out=outputFromOperationByfOperatedByNot);
    Mux16(a=outputFromOperationByf, b=outputFromOperationByfOperatedByNot, sel=no, out=output, out[15]=out15, out[0..7]=input1ToOr8Way, out[8..15]=input2ToOr8Way);
    And16(a=output, b=true, out=out);

    //FLAGS
    Or8Way(in=input1ToOr8Way, out=orOut1);
    Or8Way(in=input2ToOr8Way, out=orOut2);
    Or(a=orOut1, b=orOut2, out=orOut);
    Not(in=orOut, out=zr);

    And(a=out15, b=true, out=ng);

}